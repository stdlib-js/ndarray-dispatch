"use strict";var y=function(i,r){return function(){return r||i((r={exports:{}}).exports,r),r.exports}};var b=y(function(D,w){"use strict";function k(i,r,e,u,f,m,n,o,l){var h,t,s,a;for(h=m,s=0;s<i;s++){for(t=l,a=0;a<r&&e[h+a*f]===n[t];a++)t+=o;if(a===r)return s;h+=u}return-1}w.exports=k});var V=y(function(L,x){"use strict";var E=require("@stdlib/assert-is-nonnegative-integer").isPrimitive,F=require("@stdlib/assert-is-positive-integer"),I=require("@stdlib/assert-is-integer").isPrimitive,j=require("@stdlib/assert-is-function-array"),A=require("@stdlib/assert-is-function"),T=require("@stdlib/assert-is-collection"),O=require("@stdlib/assert-is-ndarray-like"),v=require("@stdlib/string-format"),P=require("@stdlib/ndarray-dtype"),q=require("@stdlib/ndarray-base-dtype-resolve-enum"),U=b();function N(i){var r,e;for(r=[],e=0;e<i.length;e++)r.push(q(i[e]));return r}function S(i,r,e,u,f,m){var n,o,l;if(A(i))l=i;else if(!j(i))throw new TypeError(v("invalid argument. First argument must be either a function or an array of functions. Value: `%s`.",i));if(!T(r))throw new TypeError(v("invalid argument. Second argument must be an array-like object. Value: `%s`.",r));if(!T(e)&&e!==null)throw new TypeError(v("invalid argument. Third argument must be an array-like object or null. Value: `%s`.",e));if(!F(u))throw new TypeError(v("invalid argument. Fourth argument must be a positive integer. Value: `%s`.",u));if(!E(f))throw new TypeError(v("invalid argument. Fifth argument must be a nonnegative integer. Value: `%s`.",f));if(!E(m))throw new TypeError(v("invalid argument. Sixth argument must be a nonnegative integer. Value: `%s`.",m));if(n=f+m,n===0)throw new Error("invalid arguments. Interface must accept at least one input and/or output ndarray. Based on the provided arguments, `nin+nout` equals `0`.");if(u!==n)throw new Error("invalid arguments. Fourth argument does not equal the number of input and output ndarrays.");if(l){if(o=r.length/n,!I(o))throw new Error("invalid argument. Unexpected number of types. A type must be specified for each input and output ndarray for each provided ndarray function.")}else if(o=i.length,r.length!==o*n)throw new Error("invalid argument. Unexpected number of types. A type must be specified for each input and output ndarray for each provided ndarray function.");if(e&&e.length!==o)throw new Error("invalid argument. The third argument must have the same number of elements as the first argument.");return r=N(r),h;function h(){var t,s,a,p,d,c,g;if(a=arguments.length,a!==u)throw a<u?new Error("invalid invocation. Insufficient arguments."):new Error("invalid invocation. Too many arguments.");for(t=[],s=[],g=0;g<u;g++){if(d=arguments[g],!O(d))throw g<f?new TypeError(v("invalid argument. Input array must be an ndarray-like object. Value: `%s`.",d)):new TypeError(v("invalid argument. Output array must be an ndarray-like object. Value: `%s`.",d));t.push(d),s.push(q(P(d)))}if(p=U(o,n,r,n,1,0,s,1,0),p<0)throw new TypeError("invalid arguments. Unable to resolve an ndarray function supporting the provided array argument data types.");if(l?c=l:c=i[p],e?c(t,e[p]):c(t),m===1)return t[n-1];if(m!==0)return t.slice(f)}}x.exports=S});var B=V();module.exports=B;
/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
//# sourceMappingURL=index.js.map
