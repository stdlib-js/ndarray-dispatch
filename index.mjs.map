{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport isPositiveInteger from '@stdlib/assert-is-positive-integer';\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport isFunctionArray from '@stdlib/assert-is-function-array';\nimport isFunction from '@stdlib/assert-is-function';\nimport isCollection from '@stdlib/assert-is-collection';\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport getDType from '@stdlib/ndarray-dtype';\nimport resolveEnum from '@stdlib/ndarray-base-dtype-resolve-enum';\nimport dtypes2enums from '@stdlib/ndarray-base-dtypes2enums';\nimport { ndarray as gindexOfRow } from '@stdlib/blas-ext-base-gindex-of-row';\n\n\n// MAIN //\n\n/**\n* Returns an ndarray function interface which performs multiple dispatch.\n*\n* @param {(FunctionArray|Function)} fcns - list of ndarray functions\n* @param {Collection} types - one-dimensional list of ndarray argument data types\n* @param {(Collection|null)} data - ndarray function data (e.g., callbacks)\n* @param {PositiveInteger} nargs - total number of ndarray function interface arguments\n* @param {NonNegativeInteger} nin - number of input ndarrays\n* @param {NonNegativeInteger} nout - number of output ndarrays\n* @throws {TypeError} first argument must be either a function or an array of functions\n* @throws {TypeError} second argument must be an array-like object\n* @throws {TypeError} third argument must be an array-like object or `null`\n* @throws {Error} third and first arguments must have the same number of elements\n* @throws {TypeError} fourth argument must be a positive integer\n* @throws {TypeError} fifth argument must be a nonnegative integer\n* @throws {TypeError} sixth argument must be a nonnegative integer\n* @throws {Error} fourth argument must equal the specified number of input and output arrays\n* @throws {Error} number of types must match the number of functions times the total number of array arguments for each function\n* @throws {Error} interface must accept at least one input and/or output ndarray\n* @returns {Function} ndarray function interface\n*\n* @example\n* import unary from '@stdlib/ndarray-base-unary';\n* import abs from '@stdlib/math-base-special-abs';\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray from '@stdlib/ndarray-ctor';\n*\n* var types = [\n*     'float64', 'float64'\n* ];\n*\n* var data = [\n*     abs\n* ];\n*\n* var absolute = dispatch( unary, types, data, 2, 1, 1 );\n*\n* // ...\n*\n* var xbuf = new Float64Array( [ -1.0, -2.0, -3.0, -4.0, -5.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* var x = ndarray( 'float64', xbuf, [ 5 ], [ 1 ], 0, 'row-major' );\n* var y = ndarray( 'float64', ybuf, [ 5 ], [ 1 ], 0, 'row-major' );\n*\n* absolute( x, y );\n* // ybuf => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction dispatch( fcns, types, data, nargs, nin, nout ) {\n\tvar narrays;\n\tvar nfcns;\n\tvar fcn;\n\n\tif ( isFunction( fcns ) ) {\n\t\tfcn = fcns;\n\t} else if ( !isFunctionArray( fcns ) ) {\n\t\tthrow new TypeError( format( '0jr5d', fcns ) );\n\t}\n\tif ( !isCollection( types ) ) {\n\t\tthrow new TypeError( format( '0jr2y', types ) );\n\t}\n\tif ( !isCollection( data ) && data !== null ) {\n\t\tthrow new TypeError( format( '0jr5e', data ) );\n\t}\n\tif ( !isPositiveInteger( nargs ) ) {\n\t\tthrow new TypeError( format( '0jr5f', nargs ) );\n\t}\n\tif ( !isNonNegativeInteger( nin ) ) {\n\t\tthrow new TypeError( format( '0jr5X', nin ) );\n\t}\n\tif ( !isNonNegativeInteger( nout ) ) {\n\t\tthrow new TypeError( format( '0jr5g', nout ) );\n\t}\n\tnarrays = nin + nout;\n\tif ( narrays === 0 ) {\n\t\tthrow new Error( format('0jr0h') );\n\t}\n\tif ( nargs !== narrays ) {\n\t\tthrow new Error( format('0jr0i') );\n\t}\n\tif ( fcn ) {\n\t\tnfcns = types.length / narrays;\n\t\tif ( !isInteger( nfcns ) ) {\n\t\t\tthrow new Error( format('0jr0j') );\n\t\t}\n\t} else {\n\t\tnfcns = fcns.length;\n\t\tif ( types.length !== nfcns*narrays ) {\n\t\t\tthrow new Error( format('0jr0j') );\n\t\t}\n\t}\n\tif ( data && data.length !== nfcns ) {\n\t\tthrow new Error( format('0jr0k') );\n\t}\n\ttypes = dtypes2enums( types );\n\treturn dispatcher;\n\n\t/**\n\t* ndarray function interface which performs multiple dispatch.\n\t*\n\t* @private\n\t* @param {ndarrayLike} x - ndarray\n\t* @param {...ndarrayLike} args - ndarray arguments\n\t* @throws {Error} insufficient arguments\n\t* @throws {Error} too many arguments\n\t* @throws {TypeError} input array arguments must be ndarray-like objects\n\t* @throws {TypeError} output array arguments must be ndarray-like objects\n\t* @throws {TypeError} unable to resolve an ndarray function supporting the provided ndarray argument data types\n\t* @returns {(ndarrayLike|Array<ndarrayLike>|void)} destination array(s)\n\t*/\n\tfunction dispatcher() {\n\t\tvar arrays;\n\t\tvar dtypes;\n\t\tvar argc;\n\t\tvar idx;\n\t\tvar v;\n\t\tvar f;\n\t\tvar i;\n\n\t\targc = arguments.length;\n\t\tif ( argc !== nargs ) {\n\t\t\tif ( argc < nargs ) {\n\t\t\t\tthrow new Error( format('0jr0l') );\n\t\t\t}\n\t\t\tthrow new Error( format('0jr0m') );\n\t\t}\n\t\tarrays = [];\n\t\tdtypes = [];\n\t\tfor ( i = 0; i < nargs; i++ ) {\n\t\t\tv = arguments[ i ];\n\t\t\tif ( !isndarrayLike( v ) ) {\n\t\t\t\tif ( i < nin ) {\n\t\t\t\t\tthrow new TypeError( format( '0jr5h', v ) );\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError( format( '0jr5i', v ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\tarrays.push( v );\n\t\t\tdtypes.push( resolveEnum( getDType( v ) ) );\n\t\t}\n\t\t// Resolve the ndarray function satisfying the input array types:\n\t\tidx = gindexOfRow( nfcns, narrays, types, narrays, 1, 0, dtypes, 1, 0 );\n\n\t\t// Check whether we were able to successfully resolve an ndarray function:\n\t\tif ( idx < 0 ) {\n\t\t\tthrow new TypeError( format('0jr0n') );\n\t\t}\n\t\t// Retrieve the ndarray function:\n\t\tif ( fcn ) {\n\t\t\tf = fcn;\n\t\t} else {\n\t\t\tf = fcns[ idx ];\n\t\t}\n\t\t// Evaluate the ndarray function:\n\t\tif ( data ) {\n\t\t\tf( arrays, data[ idx ] );\n\t\t} else {\n\t\t\tf( arrays );\n\t\t}\n\t\tif ( nout === 1 ) {\n\t\t\treturn arrays[ narrays-1 ];\n\t\t}\n\t\tif ( nout === 0 ) {\n\t\t\treturn;\n\t\t}\n\t\treturn arrays.slice( nin );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default dispatch;\n"],"names":["dispatch","fcns","types","data","nargs","nin","nout","narrays","nfcns","fcn","isFunction","isFunctionArray","TypeError","format","isCollection","isPositiveInteger","isNonNegativeInteger","Error","length","isInteger","dtypes2enums","arrays","dtypes","argc","idx","v","f","i","arguments","isndarrayLike","push","resolveEnum","getDType","gindexOfRow","slice"],"mappings":";;irCAsFA,SAASA,EAAUC,EAAMC,EAAOC,EAAMC,EAAOC,EAAKC,GACjD,IAAIC,EACAC,EACAC,EAEJ,GAAKC,EAAYT,GAChBQ,EAAMR,OACA,IAAMU,EAAiBV,GAC7B,MAAM,IAAIW,UAAWC,EAAQ,QAASZ,IAEvC,IAAMa,EAAcZ,GACnB,MAAM,IAAIU,UAAWC,EAAQ,QAASX,IAEvC,IAAMY,EAAcX,IAAmB,OAATA,EAC7B,MAAM,IAAIS,UAAWC,EAAQ,QAASV,IAEvC,IAAMY,EAAmBX,GACxB,MAAM,IAAIQ,UAAWC,EAAQ,QAAST,IAEvC,IAAMY,EAAsBX,GAC3B,MAAM,IAAIO,UAAWC,EAAQ,QAASR,IAEvC,IAAMW,EAAsBV,GAC3B,MAAM,IAAIM,UAAWC,EAAQ,QAASP,IAGvC,GAAiB,KADjBC,EAAUF,EAAMC,GAEf,MAAM,IAAIW,MAAOJ,EAAO,UAEzB,GAAKT,IAAUG,EACd,MAAM,IAAIU,MAAOJ,EAAO,UAEzB,GAAKJ,GAEJ,GADAD,EAAQN,EAAMgB,OAASX,GACjBY,EAAWX,GAChB,MAAM,IAAIS,MAAOJ,EAAO,eAIzB,GADAL,EAAQP,EAAKiB,OACRhB,EAAMgB,SAAWV,EAAMD,EAC3B,MAAM,IAAIU,MAAOJ,EAAO,UAG1B,GAAKV,GAAQA,EAAKe,SAAWV,EAC5B,MAAM,IAAIS,MAAOJ,EAAO,UAGzB,OADAX,EAAQkB,EAAclB,GAgBtB,WACC,IAAImB,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAJ,EAAOK,UAAUV,OACZK,IAASnB,EAAQ,CACrB,GAAKmB,EAAOnB,EACX,MAAM,IAAIa,MAAOJ,EAAO,UAEzB,MAAM,IAAII,MAAOJ,EAAO,SACxB,CAGD,IAFAQ,EAAS,GACTC,EAAS,GACHK,EAAI,EAAGA,EAAIvB,EAAOuB,IAAM,CAE7B,IAAME,EADNJ,EAAIG,UAAWD,IAEd,MAAKA,EAAItB,EACF,IAAIO,UAAWC,EAAQ,QAASY,IAEhC,IAAIb,UAAWC,EAAQ,QAASY,IAGxCJ,EAAOS,KAAML,GACbH,EAAOQ,KAAMC,EAAaC,EAAUP,IACpC,CAKD,IAHAD,EAAMS,EAAazB,EAAOD,EAASL,EAAOK,EAAS,EAAG,EAAGe,EAAQ,EAAG,IAGzD,EACV,MAAM,IAAIV,UAAWC,EAAO,UAI5Ba,EADIjB,GAGAR,EAAMuB,GAGNrB,EACJuB,EAAGL,EAAQlB,EAAMqB,IAEjBE,EAAGL,GAEJ,GAAc,IAATf,EACJ,OAAOe,EAAQd,EAAQ,GAExB,GAAc,IAATD,EACJ,OAED,OAAOe,EAAOa,MAAO7B,EACrB,CACF"}